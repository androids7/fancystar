/* Exit Games Photon - C Client Lib
 * Copyright (C) 2004-2012 by Exit Games GmbH. All rights reserved.
 * http://www.exitgames.com
 * mailto:developer@exitgames.com
 */

#ifndef __CALLBACKS_H
#define __CALLBACKS_H

//********************************************************************************************************************************
// Callback typedef functions
//********************************************************************************************************************************

/* Summary
   Typedef for the call back function to be invoked in response
   to basic operations sent to the Photon Server providing the result values from the server.
   Description
   This CB is used as general callback for all operations. The type of an operation is
   identified by an opCode.

   An operation's result is summarized by the returnCode: an int typed code, 0 for OK or
   some error code defined by the application, which is defining the operation itself.
   The opCode defines the type of operation called on Photon and in turn also the returnValues. They are
   provided as Hashtable which contains the complete answer of Photon, including keys for
   opCode and returnCode. Each operation returns its opCode and returnCode but anything else can be
   defined serverside.

   Parameters
   pUser             : user data
   operationResponse : the operationResponse                       */
typedef void(*CB_ON_OPERATION_RESPONSE)(void* pUser, COperationResponse* operationResponse);

/* Summary 
   CB_ON_STATUS_CHANGED is used to denote errors or simply state-changes of the respective PhotonPeer.
   Description
   State change callback

   When this method is used to signalize a state-change, the opCode and other values will be 0 (or null)
   with the following statusCode values:
    * SC_CONNECT the connection to the Photon Server was established
    * SC_DISCONNECT the connection was closed (due to an API-call or a timeout)
    * SC_EXCEPTION/SC_EXCEPTION_CONNECT some system or network error closed the connection

   Possible errors
   When developing with the Photon API, hundreds of events might reach a client each minute. If they are
   not processed in time, they might cause issues. As result of this, there are warnings and errors,
   which should help getting the timing right. Check PhotonConstants for a list (they start with SC_).

   Parameters
   pUser :         user data
   statusCode :    see description                        */
typedef void(*CB_ON_STATUS_CHANGED)(void* pUser, int statusCode);

/* Summary
   Typedef for the event handler function for all Neutron Events
   transmitted by PhotonPeer (UDP).
   Description
   Whenever a Photon event is sent and received via UDP, the
   local peer will be notified via this method. So this is the
   corresponding callback function to Neutron's EVENTACTION_CB
   for HTTP transmissions. Please refer to "sending and
   receiving data" for more information. When a new PhotonPeer is
   created, a pointer to a callback function must be set using
   the function:
   
   <link PhotonPeer_SetCBOnEvent@SPhotonPeer*@CB_ON_EVENT@void*, IPHOTONPEER_SetCBEventAction()>
   
   This way, an application can react on any event, based on its
   eventCode.
   
   The following Neutron events are reported by default:
   
   EV_RT_JOIN
   
   EV_RT_LEAVE
   
   These events are predefined and will be triggered as soon as
   a player has joined or has left the room the local player is
   currently active in. To transmit in-room data, define your
   \own events as needed for your application, and transmit them
   using <link PhotonPeer_opRaiseEvent@SPhotonPeer*@bool@EG_HashTable*@nByte, IPHOTONPEER_OpRaiseEvent()>.
   
   
   
   All events which are raised in reaction to some player's
   actions (like sending data), contain the actor number of the
   sending player in the "parameters" Hashtable. To extract
   this actor number from an event (where available) use code
   like this:
   
   <code>
   nByte key = EV_RT_KEY_ACTORNR;
   \*(int*)( EG_HashTable_getValFromKey(parameters, &amp;key, EG_BYTE, NULL )-\>obj_data );
   
   </code>
   
   If the received event has been raised by another player by
   calling PhotonPeer_opRaiseEvent(), the transmitted "evData"
   hashtable will be stored in the "parameters" hashtable of
   CB_ON_EVENT at key EV_RT_KEY_DATA. Please refer to the
   "realtime demo" in your SDK for sample code.
   Parameters
   pUser :    user data
   eventDataContent: the event
   See Also
   <link MemoryManagement, Sending and receiving data> , <link PhotonPeer_opRaiseEvent@SPhotonPeer*@bool@EG_HashTable*@nByte, PhotonPeer_opRaiseEvent()> */
typedef void(*CB_ON_EVENT)(void* pUser, CEventData* eventDataContent);

/* Summary
   Typedef for a callback function used for receiving debug
   messages generated by Photon functions.
   Description
   Please refer to <link PhotonPeer_SetCBDebugReturn@SPhotonPeer*@CB_DEBUG_RETURN@void*, IPHOTONPEER_SetCBDebugReturn()>
   Parameters
   pUser       : user data
   PdebugLevel : the minimum PhotonPeer_DebugLevel value needed for this message to be passed to your application
   debugString : string containing debug information                                                      */
typedef void(*CB_DEBUG_RETURN) (void* pUser, PhotonPeer_DebugLevel debugLevel, EG_CHAR* debugString);

#endif